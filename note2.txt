修改底下excel，按下Apply UL Filter或Apply DL Filter以後，
除了更新網頁表格，也下載table到新的excel檔案，輸出檔名為原先檔名加上下標filter數值，列出完整修後html

<!-- 
  Copyright © [2023] [Dustin_Chen]. All rights reserved.
  Author: Dustin_Chen 
  Email:  Dustin_Chen@compal.com or chuhpsdustin@gmail.com
-->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>parse_cu_excel</title>
    <style>
        body {
            line-height: 1.2;
            font-size: 14px;
            font-family: Roboto, sans-serif;
            white-space: nowrap;
            overflow-x: auto;
        }

        .gnb-stats {
            color: black;
            font-size: 12px;
        }

        .udp-dl-tx {
            color: blue;
            font-size: 12px;
        }

        .udp-ul-tx {
            color: red;
            font-size: 12px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            flex: 1;
        }

        table, th, td {
            border: 1px solid black;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        /* Styles for file input and filename display */
        #fileNameDisplay {
            display: inline-block;
            width: 100%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 14px;
            color: #333;
            padding-left: 10px;
        }

        #fileInput {
            margin-top: 10px;
            display: none;
        }

        /* Container for side-by-side tables */
        .table-container {
            display: flex;
            justify-content: space-between;
        }

        .table-wrapper {
            width: 48%; /* Each table takes up almost half of the container */
        }

        /* For UL and DL table filters */
        .filter-container {
            margin-top: 10px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <script>
        let allTimestampsUL = [];
        let allUdpUlTxValues = [];
        let allTimestampsDL = [];
        let allUdpDlTxValues = [];

        function handleFileUploadAndParse(event) {
            const files = event.target.files;
            if (files.length === 0) {
                alert("No files selected!");
                return;
            }

            // Reset data before processing new files
            allTimestampsUL = [];
            allUdpUlTxValues = [];
            allTimestampsDL = [];
            allUdpDlTxValues = [];

            const fileArray = Array.from(files);

            // Sort files by name in ascending order
            fileArray.sort((a, b) => a.name.localeCompare(b.name));

            // Display the number of selected files
            document.getElementById("fileNameDisplay").textContent = "Files: " + files.length + " file(s) selected";

            // Clear the data tables before processing new files
            const ulTable = document.getElementById("dataTableUL");
            ulTable.innerHTML = "<tr><th>Time</th><th>UL Throughput (Mbps)</th></tr>";
            const dlTable = document.getElementById("dataTableDL");
            dlTable.innerHTML = "<tr><th>Time</th><th>DL Throughput (Mbps)</th></tr>";

            // Read and parse each file
            Promise.all(fileArray.map(file => readFile(file)))
                .then(fileContents => {
                    fileContents.forEach(content => {
                        parseContentAndUpdate(content);
                    });

                    // After all files are processed, update the tables
                    updateTableUL(allTimestampsUL, allUdpUlTxValues);
                    updateTableDL(allTimestampsDL, allUdpDlTxValues);
                })
                .catch(error => alert("Error reading files: " + error));
        }

        function readFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    resolve(e.target.result);
                };
                reader.onerror = function() {
                    reject("Failed to read file: " + file.name);
                };
                reader.readAsText(file);
            });
        }

        function parseContentAndUpdate(inputText) {
            const lines = inputText.split("\n");
            const timestampsUL = [];
            const udpUlTxValues = [];
            const timestampsDL = [];
            const udpDlTxValues = [];

            // Parse the input text for relevant data
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];

                if (line.includes("GNB MGR STATISTICS")) {
                    const timestamp = line.match(/\[(.*?)\]/)[1];  // Extract the timestamp
                    timestampsUL.push(timestamp);
                    timestampsDL.push(timestamp);
                } else if (line.includes("UDP-UL-Tx")) {
                    const udpUlTxValue = line.match(/\(.*?(\d+(\.\d+)?)\s*Mbps\)/); // Extract the Mbps value
                    if (udpUlTxValue) {
                        udpUlTxValues.push(parseFloat(udpUlTxValue[1]));
                    }
                } else if (line.includes("UDP-DL-Tx")) {
                    const udpDlTxValue = line.match(/\(.*?(\d+(\.\d+)?)\s*Mbps\)/); // Extract the Mbps value
                    if (udpDlTxValue) {
                        udpDlTxValues.push(parseFloat(udpDlTxValue[1]));
                    }
                }
            }

            allTimestampsUL = allTimestampsUL.concat(timestampsUL);
            allUdpUlTxValues = allUdpUlTxValues.concat(udpUlTxValues);
            allTimestampsDL = allTimestampsDL.concat(timestampsDL);
            allUdpDlTxValues = allUdpDlTxValues.concat(udpDlTxValues);
        }

        function updateTableUL(timestamps, udpUlTxValues) {
            const table = document.getElementById("dataTableUL");
            table.innerHTML = "<tr><th>Time</th><th>UL Throughput (Mbps)</th></tr>";
            for (let i = 0; i < timestamps.length; i++) {
                const row = table.insertRow();
                const cell1 = row.insertCell(0);
                const cell2 = row.insertCell(1);
                cell1.textContent = timestamps[i];
                cell2.textContent = udpUlTxValues[i] || '-';
            }
        }

        function updateTableDL(timestamps, udpDlTxValues) {
            const table = document.getElementById("dataTableDL");
            table.innerHTML = "<tr><th>Time</th><th>DL Throughput (Mbps)</th></tr>";
            for (let i = 0; i < timestamps.length; i++) {
                const row = table.insertRow();
                const cell1 = row.insertCell(0);
                const cell2 = row.insertCell(1);
                cell1.textContent = timestamps[i];
                cell2.textContent = udpDlTxValues[i] || '-';
            }
        }

        function applyULFilter() {
            const ulFilter = parseFloat(document.getElementById("ulFilter").value) || 0;
            const filteredTimestampsUL = [];
            const filteredUdpUlTxValues = [];
            for (let i = 0; i < allTimestampsUL.length; i++) {
                if (allUdpUlTxValues[i] > ulFilter) {
                    filteredTimestampsUL.push(allTimestampsUL[i]);
                    filteredUdpUlTxValues.push(allUdpUlTxValues[i]);
                }
            }
            updateTableUL(filteredTimestampsUL, filteredUdpUlTxValues);
        }

        function applyDLFilter() {
            const dlFilter = parseFloat(document.getElementById("dlFilter").value) || 0;
            const filteredTimestampsDL = [];
            const filteredUdpDlTxValues = [];
            for (let i = 0; i < allTimestampsDL.length; i++) {
                if (allUdpDlTxValues[i] > dlFilter) {
                    filteredTimestampsDL.push(allTimestampsDL[i]);
                    filteredUdpDlTxValues.push(allUdpDlTxValues[i]);
                }
            }
            updateTableDL(filteredTimestampsDL, filteredUdpDlTxValues);
        }

        function triggerFileInput() {
            document.getElementById('fileInput').click();
        }
    </script>
</head>

<body>
    <h2>parse_cu_excel</h2>

    <p style="margin: 0;">Author: Dustin_Chen, email: <a href="mailto:Dustin_Chen@compal.com">Dustin_Chen@compal.com</a> or <a href="mailto:chuhpsdustin@gmail.com">chuhpsdustin@gmail.com</a></p>

    <div>
        <br>
        <label for="fileInput">● Please upload the "cu_stats_XXX.txt" files:</label><br>
        <!-- Hidden file input -->
        <input type="file" id="fileInput" accept=".txt" multiple onchange="handleFileUploadAndParse(event)">
        
        <!-- Custom button to trigger file selection -->
        <button onclick="triggerFileInput()">Select Files & Parse</button>
        
        <br>
        <span id="fileNameDisplay">No files selected</span> <!-- Display filename here -->
    </div>

    <div class="filter-container">
        <h4>UL Throughput Data Table:</h4>
        <label for="ulFilter">Filter UL (Mbps): </label>
        <input type="number" id="ulFilter" placeholder="Enter UL filter value">
        <button onclick="applyULFilter()">Apply UL Filter</button>
    </div>

    <div class="table-container">
        <div class="table-wrapper">
            <table id="dataTableUL"></table>
        </div>
        <div class="table-wrapper">
            <h4>DL Throughput Data Table:</h4>
            <label for="dlFilter">Filter DL (Mbps): </label>
            <input type="number" id="dlFilter" placeholder="Enter DL filter value">
            <button onclick="applyDLFilter()">Apply DL Filter</button>
            <table id="dataTableDL"></table>
        </div>
    </div>
</body>

</html>

